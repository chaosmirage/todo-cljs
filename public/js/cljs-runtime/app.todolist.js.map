{"version":3,"sources":["app/todolist.cljs"],"mappings":"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","names":["js/app","js/app.todolist","js/app.todolist.todos","app.todolist/todos","reagent.core.atom","cljs.core/sorted-map","js/app.todolist.counter","app.todolist/counter","app.todolist/add-todo","text","id","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/assoc","app.todolist/toggle","cljs.core/update-in","cljs.core/not","app.todolist/save","title","cljs.core/assoc-in","app.todolist/delete","cljs.core/dissoc","app.todolist/mmap","m","f","a","cljs.core.into","cljs.core/empty","app.todolist/complete-all","v","p1__27239#","cljs.core/map","app.todolist/clear-done","p1__27240#","cljs.core/remove","cljs.core.get_in","js/app.todolist.init","app.todolist/init","p__27243","map__27244","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.todolist/todo-input","on-save","on-stop","val","stop","cljs.core/reset!","save","cljs.core/deref","clojure.string/trim","cljs.core/empty?","p__27246","map__27247","p1__27241#","p1__27242#","class","placeholder","G__27249","app.todolist/todo-edit","p1__27250#","cljs.core/with-meta","reagent.dom/dom-node","p__27251","map__27252","app.todolist/todo-stats","filt","active","done","props-for","name","cljs.core._EQ_","G__27254","app.todolist/todo-item","editing","p__27256","map__27257","p1__27255#","app.todolist/todolist","props","items","cljs.core/vals","cljs.core.filter","cljs.core/count","iter__4529__auto__","s__27260","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__27262","cljs.core/chunk-buffer","i__27261","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27259","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","todo","G__27263","cljs.core/Keyword","js/Error","cljs.core/complement","cljs.core/identity","cljs.core/chunk-first"],"sourcesContent":["(ns app.todolist\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]))\n\n(defonce todos (r/atom (sorted-map)))\n\n(defonce counter (r/atom 0))\n\n(defn add-todo [text]\n  (let [id (swap! counter inc)]\n    (swap! todos assoc id {:id id :title text :done false})))\n\n(defn toggle [id] (swap! todos update-in [id :done] not))\n(defn save [id title] (swap! todos assoc-in [id :title] title))\n(defn delete [id] (swap! todos dissoc id))\n\n(defn mmap [m f a] (->> m (f a) (into (empty m))))\n(defn complete-all [v] (swap! todos mmap map #(assoc-in % [1 :done] v)))\n(defn clear-done [] (swap! todos mmap remove #(get-in % [1 :done])))\n\n(defonce init (do\n                (add-todo \"Rename Cloact to Reagent\")\n                (add-todo \"Add undo demo\")\n                (add-todo \"Make all rendering async\")\n                (add-todo \"Allow any arguments to component functions\")\n                (complete-all true)))\n\n(defn todo-input [{:keys [title on-save on-stop]}]\n  (let [val (r/atom title)\n        stop #(do (reset! val \"\")\n                  (if on-stop (on-stop)))\n        save #(let [v (-> @val str str/trim)]\n                (if-not (empty? v) (on-save v))\n                (stop))]\n    (fn [{:keys [id class placeholder]}]\n      [:input {:type \"text\" :value @val\n                :id id :class class :placeholder placeholder\n                :on-blur save\n                :on-change #(reset! val (-> % .-target .-value))\n                :on-key-down #(case (.-which %)\n                                13 (save)\n                                27 (stop)\n                                nil)}])))\n\n(def todo-edit (with-meta todo-input\n                  {:component-did-mount #(.focus (rdom/dom-node %))}))\n\n(defn todo-stats [{:keys [filt active done]}]\n  (let [props-for (fn [name]\n                    {:class (if (= name @filt) \"selected\")\n                      :on-click #(reset! filt name)})]\n    [:div\n      [:span#todo-count\n      [:strong active] \" \" (case active 1 \"item\" \"items\") \" left\"]\n      [:ul#filters\n      [:li [:a (props-for :all) \"All\"]]\n      [:li [:a (props-for :active) \"Active\"]]\n      [:li [:a (props-for :done) \"Completed\"]]]\n      (when (pos? done)\n        [:button#clear-completed {:on-click clear-done}\n        \"Clear completed \" done])]))\n\n(defn todo-item []\n  (let [editing (r/atom false)]\n    (fn [{:keys [id done title]}]\n      [:li {:class (str (if done \"completed \")\n                        (if @editing \"editing\"))}\n        [:div.view\n        [:input.toggle {:type \"checkbox\" :checked done\n                        :on-change #(toggle id)}]\n        [:label {:on-double-click #(reset! editing true)} title]\n        [:button.destroy {:on-click #(delete id)}]]\n        (when @editing\n          [todo-edit {:class \"edit\" :title title\n                      :on-save #(save id %)\n                      :on-stop #(reset! editing false)}])])))\n\n(defn todolist [props]\n  (let [filt (r/atom :all)]\n    (fn []\n      (let [items (vals @todos)\n            done (->> items (filter :done) count)\n            active (- (count items) done)]\n        [:div\n          [:section#todoapp\n          [:header#header\n            [:h1 \"todos\"]\n            [todo-input {:id \"new-todo\"\n                        :placeholder \"What needs to be done?\"\n                        :on-save add-todo}]]\n          (when (-> items count pos?)\n            [:div\n              [:section#main\n              [:input#toggle-all {:type \"checkbox\" :checked (zero? active)\n                                  :on-change #(complete-all (pos? active))}]\n              [:label {:for \"toggle-all\"} \"Mark all as complete\"]\n              [:ul#todo-list\n                (for [todo (filter (case @filt\n                                    :active (complement :done)\n                                    :done :done\n                                    :all identity) items)]\n                  ^{:key (:id todo)} [todo-item todo])]]\n              [:footer#footer\n              [todo-stats {:active active :done done :filt filt}]]])]\n          [:footer#info\n          [:p \"Double-click to edit a todo\"]]]))))\n"]}